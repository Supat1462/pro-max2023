{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  const pending = [];\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n  const history = {\n    get index() {\n      var _window$history$state;\n\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n      return 0;\n    },\n    get(index) {\n      return items[index];\n    },\n    backIndex(_ref) {\n      let {\n        path\n      } = _ref;\n\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push(_ref2) {\n      let {\n        path,\n        state\n      } = _ref2;\n      interrupt();\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n    replace(_ref3) {\n      var _window$history$state2, _window$history$state3;\n      let {\n        path,\n        state\n      } = _ref3;\n      interrupt();\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{\n          path,\n          state,\n          id\n        }];\n        index = 0;\n      } else {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt(); // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n      if (n === 0) {\n        return;\n      } // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        const onPopState = () => {\n          var _window$history$state4;\n          const id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          const currentIndex = items.findIndex(item => item.id === id); // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n  };\n  return history;\n}","map":{"version":3,"names":["nanoid","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","_window$history$state","id","window","state","findIndex","item","get","backIndex","_ref","path","i","push","_ref2","slice","length","pushState","replace","_ref3","_window$history$state2","_window$history$state3","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","_window$history$state4","currentIndex","Math","max","last","pop","removeEventListener","addEventListener","listen","listener"],"sources":["C:\\Users\\supat\\node_modules\\@react-navigation\\native\\lib\\module\\createMemoryHistory.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}