{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n};\nexport default function DrawerRouter(_ref) {\n  let {\n    defaultStatus = 'closed',\n    ...rest\n  } = _ref;\n  const router = TabRouter(rest);\n  const isDrawerInHistory = state => {\n    var _state$history;\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n  };\n  const addDrawerToHistory = state => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n    return {\n      ...state,\n      history: [...state.history, {\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }]\n    };\n  };\n  const removeDrawerFromHistory = state => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n    return {\n      ...state,\n      history: state.history.filter(it => it.type !== 'drawer')\n    };\n  };\n  const openDrawer = state => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n    return addDrawerToHistory(state);\n  };\n  const closeDrawer = state => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n    return removeDrawerFromHistory(state);\n  };\n  return {\n    ...router,\n    type: 'drawer',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref2;\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref3;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return addDrawerToHistory(state);\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            const result = router.getStateForAction(state, action, options);\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n            return result;\n          }\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  };\n}","map":{"version":3,"names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","defaultStatus","rest","router","isDrawerInHistory","state","_state$history","Boolean","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","_ref2","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["C:\\Users\\supat\\node_modules\\@react-navigation\\routers\\lib\\module\\DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}