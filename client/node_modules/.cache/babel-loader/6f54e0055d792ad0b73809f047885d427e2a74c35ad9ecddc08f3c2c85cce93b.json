{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n};\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n  return history;\n};\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return {\n    ...state,\n    index,\n    history\n  };\n};\nexport default function TabRouter(_ref) {\n  let {\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  } = _ref;\n  const router = {\n    ...BaseRouter,\n    type: 'tab',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      var _state$routes, _state$index, _state$history$filter, _state$history;\n      let {\n        routeNames,\n        routeParamList\n      } = _ref3;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return {\n          ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? {\n            ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange(state, _ref4) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref4;\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter(\n      // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction(state, action, _ref5) {\n      let {\n        routeParamList\n      } = _ref5;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex({\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n                let params;\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                }\n                const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? {\n                  ...route,\n                  path,\n                  params\n                } : route;\n              })\n            }, index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n            if (index === -1) {\n              return null;\n            }\n            return {\n              ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  };\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","_ref","router","getInitialState","_ref2","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","_ref3","_state$routes","_state$index","_state$history$filter","_state$history","find","r","Math","min","max","length","getStateForRouteNamesChange","_ref4","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","_ref5","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["C:\\Users\\supat\\node_modules\\@react-navigation\\routers\\lib\\module\\TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}