{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { BaseNavigationContainer, getActionFromState, getPathFromState, getStateFromPath, validatePathConfig } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(_ref, ref) {\n  let {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  } = _ref;\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n  if (linking !== null && linking !== void 0 && linking.config) {\n    validatePathConfig(linking.config);\n  }\n  const refContainer = React.useRef(null);\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n  const {\n    getInitialState\n  } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking\n  }); // Add additional linking related info to the ref\n  // This will be used by the devtools\n\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          var _linking$prefixes, _linking$getStateFrom, _linking$getPathFromS, _linking$getActionFro;\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: (_linking$prefixes = linking === null || linking === void 0 ? void 0 : linking.prefixes) !== null && _linking$prefixes !== void 0 ? _linking$prefixes : [],\n            getStateFromPath: (_linking$getStateFrom = linking === null || linking === void 0 ? void 0 : linking.getStateFromPath) !== null && _linking$getStateFrom !== void 0 ? _linking$getStateFrom : getStateFromPath,\n            getPathFromState: (_linking$getPathFromS = linking === null || linking === void 0 ? void 0 : linking.getPathFromState) !== null && _linking$getPathFromS !== void 0 ? _linking$getPathFromS : getPathFromState,\n            getActionFromState: (_linking$getActionFro = linking === null || linking === void 0 ? void 0 : linking.getActionFromState) !== null && _linking$getActionFro !== void 0 ? _linking$getActionFro : getActionFromState\n          };\n        }\n      });\n    }\n  });\n  const [isResolved, initialState] = useThenable(getInitialState);\n  React.useImperativeHandle(ref, () => refContainer.current);\n  const linkingContext = React.useMemo(() => ({\n    options: linking\n  }), [linking]);\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n  const onReadyRef = React.useRef(onReady);\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n  React.useEffect(() => {\n    if (isReady) {\n      var _onReadyRef$current;\n      (_onReadyRef$current = onReadyRef.current) === null || _onReadyRef$current === void 0 ? void 0 : _onReadyRef$current.call(onReadyRef);\n    }\n  }, [isReady]);\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback;\n  }\n  return /*#__PURE__*/React.createElement(LinkingContext.Provider, {\n    value: linkingContext\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(BaseNavigationContainer, _extends({}, rest, {\n    initialState: rest.initialState == null ? initialState : rest.initialState,\n    ref: refContainer\n  }))));\n}\nconst NavigationContainer = /*#__PURE__*/React.forwardRef(NavigationContainerInner);\nexport default NavigationContainer;","map":{"version":3,"names":["BaseNavigationContainer","getActionFromState","getPathFromState","getStateFromPath","validatePathConfig","React","LinkingContext","DefaultTheme","ThemeProvider","useBackButton","useDocumentTitle","useLinking","useThenable","global","REACT_NAVIGATION_DEVTOOLS","WeakMap","NavigationContainerInner","_ref","ref","theme","linking","fallback","documentTitle","onReady","rest","isLinkingEnabled","enabled","config","refContainer","useRef","getInitialState","independent","prefixes","useEffect","current","set","_linking$prefixes","_linking$getStateFrom","_linking$getPathFromS","_linking$getActionFro","isResolved","initialState","useImperativeHandle","linkingContext","useMemo","options","isReady","onReadyRef","_onReadyRef$current","call","createElement","Provider","value","_extends","NavigationContainer","forwardRef"],"sources":["C:\\Users\\supat\\node_modules\\@react-navigation\\native\\lib\\module\\NavigationContainer.tsx"],"sourcesContent":["import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\n\ndeclare global {\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}