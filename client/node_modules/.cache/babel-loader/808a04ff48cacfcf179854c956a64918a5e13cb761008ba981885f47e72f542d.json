{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  pop() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  const router = {\n    ...BaseRouter,\n    type: 'stack',\n    getInitialState(_ref) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref;\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [{\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState(partialState, _ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => ({\n        ...route,\n        key: route.key || `${route.name}-${nanoid()}`,\n        params: routeParamList[route.name] !== undefined ? {\n          ...routeParamList[route.name],\n          ...route.params\n        } : route.params\n      }));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n    getStateForRouteNamesChange(state, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref3;\n      const routes = state.routes.filter(route => routeNames.includes(route.name) && !routeKeyChanges.includes(route.name));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1)\n      };\n    },\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return {\n              ...state,\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : `${name}-${nanoid()}`,\n                name,\n                params: routeParamList[name] !== undefined ? {\n                  ...routeParamList[name],\n                  ...params\n                } : params\n              } : route)\n            };\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push({\n                ...route,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              });\n            } else {\n              routes = [...state.routes, {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n            }\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes\n            };\n          }\n          return null;\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return {\n                ...state,\n                index: routes.length - 1,\n                routes\n              };\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n\n            // If the route already exists, navigate to that\n            let index = -1;\n            const getId =\n            // `getId` and `key` can't be used together\n            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (index === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n              const routes = [...state.routes, {\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1\n              };\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...route.params,\n                ...action.payload.params\n              } : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...action.payload.params\n              } : action.payload.params;\n            }\n            return {\n              ...state,\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params || action.payload.path && action.payload.path !== route.path ? {\n                ...route,\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : route.path,\n                params\n              } : state.routes[index]]\n            };\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  };\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","arguments","length","undefined","popToTop","StackRouter","options","router","getInitialState","_ref","routeNames","routeParamList","initialRouteName","includes","stale","key","index","routes","getRehydratedState","partialState","_ref2","state","filter","route","map","getStateForRouteNamesChange","_ref3","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","_action$payload$path","_action$payload$key","path","merge","actionCreators"],"sources":["C:\\Users\\supat\\node_modules\\@react-navigation\\routers\\lib\\module\\StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}