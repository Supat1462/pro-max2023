{"ast":null,"code":"import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\n\nexport default function useLinkProps(_ref) {\n  var _options$getPathFromS;\n  let {\n    to,\n    action\n  } = _ref;\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n  const onPress = e => {\n    var _e$currentTarget;\n    let shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented &&\n    // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n    // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.button == null || e.button === 0) &&\n    // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n  const getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}","map":{"version":3,"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","Platform","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","_options$getPathFromS","to","action","root","useContext","navigation","options","linkTo","onPress","e","_e$currentTarget","shouldHandle","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"sources":["C:\\Users\\supat\\node_modules\\@react-navigation\\native\\lib\\module\\useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}